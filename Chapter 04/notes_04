A list value looks like this: ['cat', 'bat', 'rat', 'elephant'].
Just as string values are typed with quote characters to mark where the string begins and ends, a list begins with an opening square bracket and ends with a closing square bracket, [].
Values inside the list are also called items. Items are separated with commas (that is, they are comma-delimited).


Negative Indexes
While indexes start at 0 and go up, you can also use negative integers for the index.
The integer value -1 refers to the last index in a list, the value -2 refers to the second-to-last index in a list, and so on. Enter the following into the interactive shell:

>>> spam = ['cat', 'bat', 'rat', 'elephant']
>>> spam[-1]
'elephant'

Slices
spam[1:4] is a list with a slice

As a shortcut, you can leave out one or both of the indexes on either side of the colon in the slice. Leaving out the first index is the same as using 0, or the beginning of the list. Leaving out the second index is the same as using the length of the list, which will slice to the end of the list

Removing Values from Lists with del Statements
In practice, you almost never need to delete simple variables. The del statement is mostly used to delete values from lists.

The in and not in Operators

>>> 'howdy' in ['hello', 'hi', 'howdy', 'heyas']
True
>>> spam = ['hello', 'hi', 'howdy', 'heyas']
>>> 'cat' in spam
False
>>> 'howdy' not in spam
False
>>> 'cat' not in spam
True


The enumerate() function is useful if you need both the item and the item’s index in the loop’s block.

Augmented Assignment Operators

>>> spam = 42
>>> spam += 1
>>> spam
43


Methods
A method is the same thing as a function, except it is “called on” a value. For example, if a list value were stored in spam, you would call the index() list method (which I’ll explain shortly) on that list like so: spam.index('hello'). The method part comes after the value, separated by a period.


>>> spam = ['hello', 'hi', 'howdy', 'heyas']
>>> spam.index('hello')
0
>>> spam.index('heyas')
3


Removing Values from Lists with the remove() Method
The del statement is good to use when you know the index of the value you want to remove from the list. The remove() method is useful when you know the value you want to remove from the list.

EXCEPTIONS TO INDENTATION RULES IN PYTHON

In most cases, the amount of indentation for a line of code tells Python what block it is in. There are some exceptions to this rule, however. For example, lists can actually span several lines in the source code file. The indentation of these lines does not matter; Python knows that the list is not finished until it sees the ending square bracket. For example, you can have code that looks like this:

spam = ['apples',
    'oranges',
                    'bananas',
'cats']
print(spam)

Of course, practically speaking, most people use Python’s behavior to make their lists look pretty and readable, like the messages list in the Magic 8 Ball program.

You can also split up a single instruction across multiple lines using the \ line continuation character at the end. Think of \ as saying, “This instruction continues on the next line.” The indentation on the line after a \ line continuation is not significant. For example, the following is valid Python code:

print('Four score and seven ' + \
      'years ago...')

These tricks are useful when you want to rearrange long lines of Python code to be a bit more readable.

Mutable and Immutable Data Types
But lists and strings are different in an important way. A list value is a mutable data type: it can have values added, removed, or changed. However, a string is immutable: it cannot be changed

Python 3.10.7 (tags/v3.10.7:6cc6b13, Sep  5 2022, 14:08:36) [MSC v.1933 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> name = 'Zophie a cat'
>>> newName = name[0:7] + 'the' + name[8:12]
>>> name
'Zophie a cat'
>>> newName
'Zophie the cat'
>>>

Tuples are similar to lists, except they are immutable and use parentheses instead of square brackets. Tuples are useful when you want to store a set of values that should not be changed throughout the life of a program. For example, the (x, y) coordinates of a rectangle or the RGB values of a color are examples of tuples.

The tuple data type is an immutable data type. This means that the tuple itself cannot be changed. However, the values inside a tuple can be changed.

>>> eggs = ('hello', 42, 0.5)
>>> eggs[1] = 99
Traceback (most recent call last):
  File "<pyshell#0>", line 1, in <module>
    eggs[1] = 99
TypeError: 'tuple' object does not support item assignment

>>> spam = list(eggs)
>>> spam[1] = 99
>>> eggs = tuple(spam)
>>> eggs
('hello', 99, 0.5)

If you need an ordered sequence of values that never changes, use a tuple

References
Although Python variables technically contain references to values, people often casually say that the variable contains the value.

>>> id('Howdy')
2840329035888

When Python runs id('Howdy'), it creates the 'Howdy' string in the computer’s memory. The numeric memory address where the string is stored is returned by the id() function. Python picks this address based on which memory bytes happen to be free on your computer at the time, so it’ll be different each time you run this code.

Python has an automatic garbage collector to delete any values not referenced by a variable to free up memory space. The garbage collector runs periodically, but you can also run it manually by calling the gc.collect() function.

>>> import copy
>>> spam = ['A', 'B', 'C', 'D']
>>> id(spam)
2840329189504
>>> cheese = copy.copy(spam)
>>> id(cheese)
2840329037888
>>> cheese[1] = 42
>>> spam
['A', 'B', 'C', 'D']
>>> cheese
['A', 42, 'C', 'D']
>>>

The copy.copy() function will do a shallow copy of a list, while the copy.deepcopy() function will do a deep copy of a list. A shallow copy will duplicate the list itself, but the references inside the list will still point to the original list values. A deep copy will duplicate the list itself and also the references inside the list, so that the duplicate list is completely independent of the original list.

