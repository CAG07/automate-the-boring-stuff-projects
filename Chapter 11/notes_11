Python displays the traceback whenever a raised exception goes unhandled. But you can also obtain it as a string by calling traceback.format_exc(). 
This function is useful if you want the information from an exception’s traceback but also want an except statement to gracefully handle the exception. 
You will need to import Python’s traceback module before calling this function.

In plain English, an assert statement says, “I assert that the condition holds true, and if not, there is a bug somewhere, so immediately stop the program.” For example, enter the following into the interactive shell:

>>> ages = [26, 57, 92, 54, 22, 15, 17, 80, 47, 73]
>>> ages.sort()
>>> ages
[15, 17, 22, 26, 47, 54, 57, 73, 80, 92]
>>> assert
ages[0] <= ages[-1] # Assert that the first age is <= the last age.

Unlike exceptions, your code should not handle assert statements with try and except; if an assert fails, your program should crash. 
Assertions are for programmer errors, not user errors. 
Assertions should only fail while the program is under development; a user should never see an assertion error in a finished program.

Using the logging Module
To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of your program (but under the #! python shebang line):

import logging
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s -  %(levelname)
s -  %(message)s')

Logging to a File
Instead of displaying the log messages to the screen, you can write them to a text file. The logging.basicConfig() function takes a filename keyword argument, like so:

import logging
logging.basicConfig(filename='myProgramLog.txt', level=logging.DEBUG, format='
%(asctime)s -  %(levelname)s -  %(message)s')

Breakpoints
A breakpoint can be set on a specific line of code and forces the debugger to pause whenever the program execution reaches that line.
