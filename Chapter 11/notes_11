Raising Exceptions
Using the try and except statements, you can handle errors more gracefully instead of letting the entire program crash.

Getting the Traceback as a String
When Python encounters an error, it produces a treasure trove of error information called the traceback. 
The traceback includes the error message, the line number of the line that caused the error, and the sequence of the function calls that led to the error. 
This sequence of calls is called the call stack.

When you run errorExample.py, the output will look like this:

Traceback (most recent call last):
  File "errorExample.py", line 7, in <module>
    spam()
  File "errorExample.py", line 2, in spam
    bacon()
  File "errorExample.py", line 5, in bacon
    raise Exception('This is the error message.')
Exception: This is the error message.

From the traceback, you can see that the error happened on line 5, in the bacon() function. 
This particular call to bacon() came from line 2, in the spam() function, which in turn was called on line 7. 
In programs where functions can be called from multiple places, the call stack can help you determine which call led to the error.

