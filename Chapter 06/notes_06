Raw Strings
You can place an r before the beginning quotation mark of a string to make it a raw string. A raw string completely ignores all escape characters and prints any backslash that appears in the string.

print(r'That is Carol\'s cat.')
That is Carol\'s cat.

The r prefix will escape all the backslashes in a string. This is useful for strings that contain backslashes that you don’t want to be escaped, such as the strings used for regular expressions described in the next chapter.

Multiline Strings with Triple Quotes
"""This is a test program.
Written by Al Sweigart al@inventwithpython.com

This program was designed for Python 3, not Python 2.
"""

The in and not in Operators with Strings
The in and not in operators can be used with strings just like with list values. An expression with two strings joined using in or not in will evaluate to a Boolean True or False. Enter the following into the interactive shell:
>>> 'Hello' in 'Hello World'
True
>>> 'Hello' in 'Hello'
True
>>> 'HELLO' in 'Hello World'
False

String interpolation
>>> name = 'Al'
>>> age = 4000
>>> 'My name is %s. I am %s years old.' % (name, age)
'My name is Al. I am 4000 years old.'

F-strings
You can use f-strings to make this print() call much cleaner:
>>> name = 'Al'
>>> age = 4000
>>> f'My name is {name}. Next year I will be {age + 1}.'
'My name is Al. Next year I will be 4001.'

The f-string expression evaluates to a string, which is then passed to the print() function. Notice that the f-string expression is inside the quotes that begin and end the string. You can use single, double, or triple quotes for an f-string.

The upper(), lower(), isupper(), and islower() Methods
>>> spam = 'Hello, world!'
>>> spam = spam.upper()
>>> spam
'HELLO, WORLD!'
>>> spam = spam.lower()
>>> spam
'hello, world!'

>>> spam = 'Hello World!'
>>> spam.islower()
False
>>> spam.isupper()
False
>>> 'HELLO'.isupper()
True
>>> 'abc'.isupper()
False
>>> 'abc'.islower()
True

Since the upper() and lower() string methods themselves return strings, you can call string methods on those returned string values as well. Expressions that do this will look like a chain of method calls. Enter the following into the interactive shell:

>>> 'Hello'.upper()
'HELLO'
>>> 'Hello'.upper().lower()
'hello

The isX() Methods
Along with islower() and isupper(), there are several other string methods that have names beginning with the word is. These methods return a Boolean value that describes the nature of the string. Here are some common isX string methods:

isalpha() Returns True if the string consists only of letters and isn’t blank

isalnum() Returns True if the string consists only of letters and numbers and is not blank

isdecimal() Returns True if the string consists only of numeric characters and is not blank

isspace() Returns True if the string consists only of spaces, tabs, and newlines and is not blank

istitle() Returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters

The isX() string methods are helpful when you need to validate user input. For example, the following program repeatedly asks users for their age and a password until they provide valid input. 
Open a new file editor window and enter this program, saving it as validateInput.py:

The startswith() and endswith() Methods
The startswith() and endswith() methods return True if the string value they are called on begins or ends (respectively) with the string passed to the method; otherwise, they return False. Enter the following into the interactive shell:

>>> 'Hello, world!'.startswith('Hello')
True
>>> 'Hello, world!'.endswith('world!')
True

The join() and split() Methods
>>> ' '.join(['My', 'name', 'is', 'Simon'])
'My name is Simon'

>>> 'My name is Simon' .split()
['My', 'name', 'is', 'Simon']

Splitting Strings with the partition() Method
The partition() string method can split a string into the text before and after a separator string. This method searches the string it is called on for the separator string it is passed, and returns a tuple of three substrings for the “before,” “separator,” and “after” substrings. Enter the following into the interactive shell:

>>> 'Hello, world!'.partition('w')
('Hello, ', 'w', 'orld!')

Justifying Text with the rjust(), ljust(), and center() Methods

Removing Whitespace with the strip(), rstrip(), and lstrip() Methods

Numeric Values of Characters with the ord() and chr() Functions
Computers store information as bytes—strings of binary numbers, which means we need to be able to convert text to numbers. Because of this, every text character has a corresponding numeric value called a unicode code point. For example, the numeric code point is 65 for 'A', 52 for '4', and 33 for '!'. You can use the ord() function to get the code point of a one-character string, and the chr() function to get the one-character string of an integer code point. Enter the following into the interactive shell:

>>> ord('A')
65
>>> ord('4')
52
>>> ord('!')
33
>>> chr(65)
'A'

Pragmatic Unicode Pycon 
https://www.youtube.com/watch?v=sgHbC6udIqc

The biggest reason for slowness in Python2 to Python3 ports is difficulty with bytes and unicode
https://pypi.org/project/unicode/

Python3
There are still 2 string types for bytes and unicode in Python3
Python3 won't implicitly change bytes to unicode

Mixing bytes and unicode is always a pain and you are forced to keep them straight
Tip# 1
Bytes on the outside and unicode on the inside - encode/decode at the edges
Tip# 2
It's either a byte or unicode string, you need to know what you have by using type
Tip# 3
Test unicode

Facts of life with unicode
2:20 FOL1 - I/O is always bytes
3:25 FOL2 - The world needs more than 256 symbols
17:08 FOL3 - Need both bytes and Unicode
22:22 FOL4 - You cannot infer the encoding of bytes
23:34 FOL5 - Declared encodings can be wrong
